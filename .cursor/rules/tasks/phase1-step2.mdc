---
description: 
globs: 
alwaysApply: false
---
# FastAPI 서버 기본 구조 구현 태스크 계획

## 📋 태스크 개요
**목표**: 최저가 쇼핑 Agent를 위한 API 서버 기반 구축
**단계**: 2단계 (Phase 1)
**선행 요구사항**: 1단계 (프로젝트 기본 구조 설정)

## 🎯 세부 목표
- FastAPI 기반 백엔드 서버 구축
- 스트리밍 통신을 위한 기본 엔드포인트 구현
- 확장 가능한 API 구조 설계
- TDD 방식의 개발 진행

## 📝 구현 항목

### 1. FastAPI 앱 설정
- [x] FastAPI 앱 인스턴스 생성 (`backend/main.py`)
- [x] CORS 설정 추가
- [x] 환경 변수 설정 구현
- [x] 앱 라우터 등록 구조 설정

### 2. 스키마 정의
- [x] 채팅 관련 Pydantic 스키마 정의 (`backend/schemas/chat.py`)
  - 사용자 요청 스키마 (ChatRequest)
  - 서버 응답 스키마 (ChatResponse)
  - 스트리밍 이벤트 스키마 (StreamingEvent)

### 3. 라우터 구현
- [x] 채팅 라우터 생성 (`backend/routers/chat.py`)
- [x] `/chat` 엔드포인트 기본 구조 구현
  - POST 요청 처리
  - 스트리밍 응답 구조 설정
- [x] 에러 핸들링 추가

### 4. 서비스 레이어 구현
- [x] 채팅 서비스 기본 구조 생성 (`backend/services/chat_service.py`)
- [x] Agent 호출을 위한 인터페이스 설계
- [x] 비동기 스트리밍 처리 함수 구현

### 5. 테스트 코드 작성
- [x] 채팅 라우터 테스트 (`tests/test_backend/test_routers/test_chat_router.py`)
- [x] 채팅 서비스 테스트 (`tests/test_backend/test_services/test_chat_service.py`)
- [x] 스키마 검증 테스트 (`tests/test_backend/test_schemas/test_chat_schemas.py`)

## 📋 개발 순서

1. **테스트 케이스 작성**
   - 먼저 각 컴포넌트의 예상 동작에 대한 테스트 코드 작성
   - TDD 원칙에 따라 실패하는 테스트 케이스 구현

2. **스키마 정의**
   - 데이터 모델을 명확히 정의하여 API 인터페이스 설계
   - Type hints 활용한 명확한 타입 정의

3. **서비스 레이어 구현**
   - 비즈니스 로직을 담당할 서비스 계층 구현
   - Agent와의 통신을 위한 인터페이스 설계

4. **라우터 구현**
   - HTTP 엔드포인트 정의 및 요청 처리 로직 구현
   - 서비스 레이어 주입 및 활용

5. **FastAPI 앱 설정**
   - 전체 앱 구성 및 설정
   - 라우터 등록 및 미들웨어 설정

6. **테스트 및 검증**
   - 구현된 코드에 대한 테스트 실행
   - pylint를 통한 코드 품질 검증
   - 필요시 리팩토링

7. **문서화**
   - API 문서 생성 및 검토
   - 코드 주석 및 타입 힌트 완성

## 🔧 기술 스택 및 라이브러리

- **FastAPI**: 웹 프레임워크
- **Pydantic**: 데이터 검증 및 설정
- **pytest**: 테스트 프레임워크
- **httpx**: 비동기 HTTP 클라이언트
- **asyncio**: 비동기 프로그래밍
- **SSE-Starlette**: 서버 센트 이벤트 지원
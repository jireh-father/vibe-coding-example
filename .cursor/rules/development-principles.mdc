---
description: 
globs: 
alwaysApply: true
---
# 개발 원칙 및 가이드라인

## 🎯 프로젝트 구조

```
vibe_coding_tutorial/
├── backend/             # FastAPI 백엔드 서버
│   ├── __init__.py
│   ├── main.py          # 애플리케이션 진입점
│   ├── routers/         # API 라우터
│   │   └── __init__.py
│   ├── schemas/         # Pydantic 스키마
│   │   └── __init__.py
│   ├── services/        # 비즈니스 로직 서비스
│   │   └── __init__.py
│   └── agents/          # AI Agent 로직
│       ├── __init__.py
│       ├── agent_template.py   # 에이전트 템플릿
│       ├── prompts/     # 프롬프트 템플릿
│       │   └── __init__.py
│       ├── graphs/      # LangGraph 워크플로우
│       │   └── __init__.py
│       └── mcp_adapters/ # MCP 어댑터
│           └── __init__.py
├── frontend/            # Streamlit 프론트엔드
│   ├── components/      # UI 컴포넌트
│   │   ├── __init__.py
│   │   ├── chat_interface.py    # 채팅 인터페이스
│   │   └── product_card.py      # 상품 카드 컴포넌트
│   ├── pages/           # 페이지 컴포넌트
│   │   ├── __init__.py
│   │   └── chat_page.py         # 메인 채팅 페이지
│   ├── utils/           # 유틸리티 함수
│   │   ├── __init__.py
│   │   ├── session_manager.py   # 세션 상태 관리
│   │   └── api_client.py        # API 클라이언트
│   ├── config/          # 설정 파일
│   │   ├── __init__.py
│   │   └── settings.py          # 앱 설정 및 상수
│   ├── styles/          # CSS 스타일
│   │   ├── __init__.py
│   │   └── custom.css           # 커스텀 스타일
│   ├── __init__.py
│   └── app.py           # 메인 Streamlit 앱
├── tests/               # 테스트 코드
│   ├── test_backend/    # 백엔드 테스트
│   │   ├── test_routers/  # 라우터 테스트
│   │   ├── test_services/ # 서비스 테스트
│   │   └── test_agents/   # 에이전트 테스트
│   └── test_frontend/   # 프론트엔드 테스트
│       ├── test_components/ # 컴포넌트 테스트
│       └── test_utils/      # 유틸리티 테스트
├── .venv/               # 가상환경
├── .cursor/rules/       # 개발 가이드라인
├── requirements.txt     # 의존성 관리
├── pytest.ini          # 테스트 설정
└── README.md
```

## 📋 개발 원칙

### 1. TDD (Test-Driven Development)
- **테스트 코드를 먼저 작성**
- 기능 구현 전에 테스트 케이스 정의
- Red-Green-Refactor 사이클 준수

### 2. SOLID 원칙
- **S**ingle Responsibility: 단일 책임 원칙
- **O**pen/Closed: 개방/폐쇄 원칙
- **L**iskov Substitution: 리스코프 치환 원칙
- **I**nterface Segregation: 인터페이스 분리 원칙
- **D**ependency Inversion: 의존성 역전 원칙

### 3. Clean Architecture
- 계층 분리: Frontend → API → Agent → Core
- 의존성 방향: 외부 → 내부
- 비즈니스 로직과 프레임워크 분리

### 4. Pylint 사용
- 필수적인 과정으로 코드 작성 후 pylint 사용해서 리뷰하고 문제있으면 수정해

## 🔧 코딩 스타일

### Python 코딩 컨벤션
- PEP 8 준수
- Type hints 사용
- Docstring 작성 (Google 스타일)
- 함수/클래스명: snake_case / PascalCase

### 파일 구조
- `__init__.py` 파일로 패키지 정의
- 모듈별 단일 책임 원칙
- 테스트 파일명: `test_*.py`

## 🎨 Frontend 아키텍처 원칙

### 1. 컴포넌트 기반 설계
- **재사용 가능한 컴포넌트**: 각 UI 요소를 독립적인 컴포넌트로 분리
- **단일 책임**: 각 컴포넌트는 하나의 명확한 역할만 수행
- **Props 기반 통신**: 컴포넌트 간 데이터 전달은 명시적으로

### 2. 상태 관리 원칙
- **중앙집중식 세션 관리**: `SessionManager` 클래스 활용
- **불변성 유지**: 상태 변경 시 새로운 객체 생성
- **명시적 상태 업데이트**: 상태 변경은 명확한 메서드를 통해서만

### 3. API 통신 원칙
- **비동기 처리**: `asyncio`와 `httpx` 활용
- **에러 핸들링**: 모든 API 호출에 적절한 예외 처리
- **타임아웃 설정**: 네트워크 요청에 적절한 타임아웃 적용

